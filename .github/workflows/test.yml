name: Unit Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: abatilo/actions-poetry@v2

      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        run: poetry install

      - name: Cache Docker layers for Neo4j
        uses: actions/cache@v3
        with:
          path: /tmp/.docker
          key: ${{ runner.os }}-neo4j-${{ hashFiles('Dockerfile.neo4j') }}
          restore-keys: |
            ${{ runner.os }}-neo4j-

      - name: "Build neo4j image"
        run: docker build --cache-from type=local,src=/tmp/.docker -f Dockerfile.neo4j -t neo4j_with_plugins .

      - name: Cache Docker layers for PostgreSQL
        uses: actions/cache@v3
        with:
          path: /tmp/.docker
          key: ${{ runner.os }}-pg-${{ hashFiles('Dockerfile.pg') }}
          restore-keys: |
            ${{ runner.os }}-pg-

      - name: "Build the postgres image"
        run: docker build --cache-from type=local,src=/tmp/.docker -f Dockerfile.pg -t pg .

      - name: Run the unit test
        run: poetry run pytest tests/unit -vv -s

      - name: Run the integration test
        run: poetry run pytest tests/integration -vv -s
