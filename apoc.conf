apoc.import.file.use_neo4j_config=true
apoc.import.file.enabled=true
# Indexes
apoc.initializer.neo4j.0=CREATE CONSTRAINT n10s_unique_uri IF NOT EXISTS FOR (r:Resource) REQUIRE r.uri IS UNIQUE
apoc.initializer.neo4j.1=CREATE CONSTRAINT email IF NOT EXISTS FOR (u:User) REQUIRE u.email IS UNIQUE
# RDF Graph Config
apoc.initializer.neo4j.2=MATCH (g:`_GraphConfig`) WITH count(*) AS count CALL apoc.do.when(count = 0, "CALL n10s.graphconfig.init({handleVocabUris: 'IGNORE'}) YIELD value RETURN value", "", {count:count}) YIELD value RETURN value.bool
apoc.initializer.neo4j.3=CALL n10s.onto.import.fetch('https://raw.githubusercontent.com/syyclops/open-operator/main/ontology/Brick.ttl', 'Turtle')
# Schema
apoc.initializer.neo4j.4=MERGE (:User{email: 'example@example.com', fullName: 'Example User'})
apoc.initializer.neo4j.5=MATCH (u:User {email: 'example@example.com'}) MERGE (p:Customer:Resource {name: 'Example Portfolio', uri: 'https://syyclops.com/example-portfolio'}) MERGE (u)-[:HAS_ACCESS_TO]->(p)
apoc.initializer.neo4j.6=MATCH (p:Customer {uri: 'https://syyclops.com/example-portfolio'}) MATCH (u:User {email: 'example@example.com'}) MERGE (f:Facility:Resource {name: "Example Facility", uri: "https://syyclops.com/example-portfolio/example-facility"}) MERGE (p)-[:HAS_FACILITY]->(f) MERGE (u)-[:HAS_ACCESS_TO]->(f)